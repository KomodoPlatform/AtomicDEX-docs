{
	"info": {
		"_postman_id": "6f80e924-7ab6-4e43-8741-5edd50eee3b4",
		"name": "mm2_dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16279216"
	},
	"item": [
		{
			"name": "Legacy",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "Electrum",
							"item": [
								{
									"name": "electrum UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"RICK\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10017\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10017\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10017\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"tQTUM\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10071\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10071\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10071\"\r\n        }\r\n    ]\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "electrum QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"electrum\",\r\n    \"coin\": \"QC\",\r\n    \"servers\": [\r\n        {\r\n            \"url\": \"electrum1.cipig.net:10050\"\r\n            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n            // \"disable_cert_verification\": false\r\n        },\r\n        {\r\n            \"url\": \"electrum2.cipig.net:10050\"\r\n        },\r\n        {\r\n            \"url\": \"electrum3.cipig.net:10050\"\r\n        }\r\n    ],\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Enable",
							"item": [
								{
									"name": "enable UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"RICK\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"requires_notarization\": false, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n    // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"ETH\",\r\n    \"urls\": [\r\n        \"http://eth1.cipig.net:8555\",\r\n        \"http://eth2.cipig.net:8555\",\r\n        \"http://eth3.cipig.net:8555\"\r\n    ],\r\n    \"swap_contract_address\": \"0x24ABE4c71FC658C91313b6552cd40cD808b3Ea80\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"gas_station_url\": null, // Accepted values: Strings\r\n    // \"gas_station_decimals\": 8,\r\n    // \"gas_station_policy\": {\r\n    //     \"policy\": \"MeanAverageFast\" // Accepted values: \"MeanAverageFast\", \"Average\"\r\n    // },\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1 // Default: Coin Config\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QTUM\"\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"enable\",\r\n    \"coin\": \"QC\",\r\n    \"swap_contract_address\": \"0x2f754733acd6d753731c00fee32cb484551cc15d\"\r\n    // \"fallback_swap_contract\": null, // Accepted values: Strings\r\n    // \"mm2\": null, // Required only if: Not in Coin Config // Accepted values: 0, 1\r\n    // \"tx_history\": false,\r\n    // \"required_confirmations\": 1, // Default: Coin Config\r\n    // \"address_format\": {\r\n    //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n    // }, // Default: Coin Config\r\n    // \"utxo_merge_params\": null,\r\n    // // \"utxo_merge_params\": {\r\n    // //     \"merge_at\":50\r\n    // //     // \"check_every\":10,\r\n    // //     // \"max_merge_at_once\":100\r\n    // //     },\r\n    // \"check_utxo_maturity\": false,\r\n    // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n    // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n    // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "disable_coin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"disable_coin\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_enabled_coins",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_enabled_coins\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "convertaddress",
							"item": [
								{
									"name": "convertaddress UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBTC-TEST\",\r\n    \"from\": \"mtQvKcJQnSqdjapPpSpAwJYikhx2QU1KSd\",\r\n    \"to_address_format\": {\r\n        \"format\": \"segwit\" // Accepted values: \"standard\", \"segwit\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress ETH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"ETH\",\r\n    \"from\": \"0xfb6916095ca1df60bb79ce92ce3ea74c37c5d359\",\r\n    \"to_address_format\": {\r\n        \"format\": \"mixedcase\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress QTUM",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tQTUM\",\r\n    \"from\": \"qXeRVx1juqADVoV9f4gofuCSoBnejTsYUj\",\r\n    \"to_address_format\": {\r\n        \"format\": \"contract\" // Accepted values: \"wallet\", \"contract\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convertaddress BCH",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convertaddress\",\r\n    \"coin\": \"tBCH\",\r\n    \"from\": \"bchtest:qzxh2lsx5z78ez6szxl0qef8cccsg9euwcu00sv2n2\",\r\n    \"to_address_format\": {\r\n        \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n    }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "convert_utxo_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"convert_utxo_address\",\r\n    \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"to_coin\": \"tBTC-TEST\"\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "withdraw",
							"item": [
								{
									"name": "withdraw UTXO",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"RICK\",\r\n    \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n    \"amount\": 1.025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n    //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n    // } // Default: Coin Config\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw ETH/ERC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"ETH\",\r\n    \"to\": \"0x60b56cde26535caD3d8AB7b54bfA2689A3C1e134\",\r\n    \"amount\": 0.0025 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"EthGas\",\r\n    //     \"gas_price\": , // Default: Max from [\"gas_station_url\", \"eth_gasPrice\" call, \"eth_feeHistory\" call]\r\n    //     \"gas\": // Default: from \"estimate_gas\" call\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw QRC20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"withdraw\",\r\n    \"coin\": \"QC\",\r\n    \"to\": \"QZVx8rW99tHCPcRoXDAHEf82PyJ2g9VZRn\",\r\n    \"amount\": 10 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"fee\": {\r\n    //     \"type\": \"Qrc20Gas\",\r\n    //     \"gas_limit\": 100000,\r\n    //     \"gas_price\": 40\r\n    // }\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "kmd_rewards_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"kmd_rewards_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_balance\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_tx_history\",\r\n    \"coin\": \"RICK\"\r\n    // \"from_id\": null, // Accepted values: Strings\r\n    // \"max\": false,\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1, // used only if: \"from_id\": null\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "send_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"send_raw_transaction\",\r\n    \"coin\": \"RICK\",\r\n    \"tx_hex\": \"0400008085202f8901ebec086d37ee2526668c4d3e8cbf381c09894f8fa32a237f9544cf036faaa61100000000d74730440220505b138301498c3b9ca86eee170f6ee6aa1023a8c1ce52b4648073e102849ce6022009293a0e928cc6a0a2a540606a0e578693f32e205054b268bfd0c569884ca22a0120b4e3edc80c28c4d470ff0ca415da8cd74210b5eb64fe4703a41e74d7d45bdafb004c6b630473a13061b1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a91478daeddb10bd92635a15360cdadf5f674e4f38888821031ac6d25833a5961e2a8822b2e8b0ac1fd55d90cbbbb18a780552cbd66fc02bb3ac68ffffffff01b8820100000000001976a9149a85cc05e9a722575feb770a217c73fd6145cf0188ac73a13061000000000000000000000000000000\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "show_priv_key",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"show_priv_key\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "validateaddress",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"validateaddress\",\r\n    \"coin\": \"RICK\",\r\n    \"address\": \"RPNERS8TK1MeRo7xBthgaNsF2vL4236zX8\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"best_orders\",\r\n    \"coin\": \"RICK\",\r\n    \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n    \"volume\": 1.1\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "buy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"buy\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cancel_all_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_all_orders\",\r\n    \"cancel_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Pair\", \"Coin\"\r\n        // \"data\": {\r\n        //     \"base\": \"RICK\", // Required only if: \"type\": \"Pair\"\r\n        //     \"rel\": \"MORTY\" // Required only if: \"type\": \"Pair\"\r\n        //     // \"ticker\": \"RICK\" // Required only if: \"type\": \"Coin\"\r\n        // } // Required only if: \"type\": \"Pair\", \"type\": \"Coin\"\r\n    }\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "cancel_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"cancel_order\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_trade_fee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_trade_fee\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "max_taker_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"max_taker_vol\",\r\n    \"coin\": \"RICK\"\r\n    // \"trade_with\": \"RICK\" // Default: \"coin\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "min_trading_vol",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"min_trading_vol\",\r\n    \"coin\": \"RICK\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_orders\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orders_history_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orders_history_by_filter\"\r\n    // \"order_type\": null, // Accepted values: \"Maker\", \"Taker\"\r\n    // \"initial_action\": null, // Accepted values: \"Buy\", \"Sell\"\r\n    // \"base\": null, // Accepted values: Strings\r\n    // \"rel\": null, // Accepted values: Strings\r\n    // \"from_price\": null, // Accepted values: Decimals\r\n    // \"to_price\": null, // Accepted values: Decimals\r\n    // \"from_volume\": null, // Accepted values: Decimals\r\n    // \"to_volume\": null, // Accepted values: Decimals\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null, // Accepted values: Integers\r\n    // \"was_taker\": null, // Accepted values: Booleans\r\n    // \"status\": null, // Accepted values: \"Fulfilled\", \"ToMaker\", \"InsufficientBalance\", \"TimedOut\", \"Cancelled\"\r\n    // \"include_details\": false\r\n\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "order_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"order_status\",\r\n    \"uuid\": \"6a242691-6c05-474a-85c1-5b3f42278f41\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook_depth",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"orderbook_depth\",\r\n    \"pairs\":[[\"RICK\",\"MORTY\"],[\"BTC\",\"KMD\"],[\"DOGE\",\"KMD\"]]\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sell",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sell\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\",\r\n    \"price\": 1.1,\r\n    \"volume\": 2.4\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"timeout\": 30,\r\n    // \"match_by\": {\r\n    //     \"type\": \"Any\" // Accepted values: \"Any\", \"Orders\", \"Pubkeys\"\r\n    //     // \"data\": [\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\",\r\n    //     //     \"1ab7edc96abaefb358b52c583048eaaeb8ea42609d096d6cddfafa02fa510c6a\"\r\n    //     //     ] // Required only if: \"type\": \"Orders\", \"type\": \"Pubkeys\"\r\n    // },\r\n    // \"order_type\": {\r\n    //     \"type\": \"GoodTillCancelled\" // Accepted values: \"GoodTillCancelled\", \"FillOrKill\"\r\n    // },\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "setprice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"setprice\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\",\r\n    \"price\": 0.9,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false,\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"cancel_previous\": true,\r\n    // \"base_confs\": 1, // Default: Coin Config\r\n    // \"base_nota\": false, // Default: Coin Config\r\n    // \"rel_confs\": 1, // Default: Coin Config\r\n    // \"rel_nota\": false, // Default: Coin Config\r\n    // \"save_in_history\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"trade_preimage\",\r\n    \"base\": \"RICK\",\r\n    \"rel\": \"MORTY\",\r\n    \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n    \"price\": 1.01,\r\n    \"volume\": 1.05 // used only if: \"max\": false\r\n    // \"max\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_maker_order",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"update_maker_order\",\r\n    \"uuid\": \"6f65968f-e3c6-4978-98c5-5cec2bb5aa5b\"\r\n    // \"new_price\": null, // Accepted values: Decimals\r\n    // \"max\": null, // Accepted values: Booleans\r\n    // \"volume_delta\": null, // Accepted values: Positive or Negative Decimals\r\n    // \"min_volume\": null, // Accepted values: Decimals\r\n    // \"base_confs\": null, // Accepted values: Integers\r\n    // \"base_nota\": null, // Accepted values: Booleans\r\n    // \"rel_confs\": null, // Accepted values: Integers\r\n    // \"rel_nota\": null // Accepted values: Booleans\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "active_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"active_swaps\"\r\n    // \"include_status\": false\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "all_swaps_uuids_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"all_swaps_uuids_by_filter\"\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "coins_needed_for_kick_start",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"coins_needed_for_kick_start\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "import_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"import_swaps\",\r\n    \"swaps\": [\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        },\r\n        {\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"my_info\": {\r\n                \"my_amount\": \"4\",\r\n                \"my_coin\": \"ETOMIC\",\r\n                \"other_amount\": \"3\",\r\n                \"other_coin\": \"BEER\",\r\n                \"started_at\": 1568881184\r\n            },\r\n            \"recoverable\": true,\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ],\r\n            \"type\": \"Taker\",\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n        }\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_recent_swaps",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_recent_swaps\"\r\n    // \"limit\": 10,\r\n    // \"page_number\": 1,\r\n    // \"from_uuid\": null, // Accepted values: Strings\r\n    // \"my_coin\": null, // Accepted values: Strings\r\n    // \"other_coin\": null, // Accepted values: Strings\r\n    // \"from_timestamp\": null, // Accepted values: Integers\r\n    // \"to_timestamp\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"my_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "recover_funds_of_swap",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"recover_funds_of_swap\",\r\n    \"params\": {\r\n        \"uuid\": \"99041f7f-a4cd-4d79-a9df-55440345ed75\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_required_confirmations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_required_confirmations\",\r\n    \"coin\": \"RICK\",\r\n    \"confirmations\": 3\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "set_requires_notarization",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"set_requires_notarization\",\r\n    \"coin\": \"RICK\",\r\n    \"requires_notarization\": true\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stats_swap_status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stats_swap_status\",\r\n    \"params\": {\r\n        \"uuid\": \"dad06692-399a-4a05-a6fc-4e4cbe6d227d\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "P2P",
					"item": [
						{
							"name": "ban_pubkey",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"ban_pubkey\",\r\n    \"pubkey\": \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n    \"reason\": \"test\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_peer_topics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_peer_topics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_gossip_topic_peers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_gossip_topic_peers\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_my_peer_id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_my_peer_id\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_peers_info",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_peers_info\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_relay_mesh",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"get_relay_mesh\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list_banned_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"list_banned_pubkeys\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "unban_pubkeys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"unban_pubkeys\",\r\n    \"unban_by\": {\r\n        \"type\": \"All\" // Accepted values: \"All\", \"Few\"\r\n        // \"data\": [\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520420\",\r\n        //     \"2cd3021a2197361fb70b862c412bc8e44cff6951fa1de45ceabfdd9b4c520560\"\r\n        // ] // Required only if: \"type\": \"Few\"\r\n    }\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "mm2 Info",
					"item": [
						{
							"name": "help",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"help\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "metrics",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"metrics\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"version\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stop",
					"item": [
						{
							"name": "sim_panic",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"sim_panic\"\r\n    // \"mode\": \"\" // Accepted values: \"\", \"simple\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"method\": \"stop\"\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Coin Activation",
					"item": [
						{
							"name": "UTXO",
							"item": [
								{
									"name": "init_utxo",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_utxo\",\r\n    \"params\": {\r\n        \"ticker\":\"RICK\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:10017\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:10017\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:10017\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\", \"cashaddress\"\r\n            // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_utxo_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_utxo_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_utxo_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_utxo_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "init_qtum",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_qtum\",\r\n    \"params\": {\r\n        \"ticker\":\"tQTUM\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n                \"rpc_data\": {\r\n                    \"servers\": [\r\n                        {\r\n                            \"url\": \"electrum1.cipig.net:10071\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum2.cipig.net:10071\"\r\n                        },\r\n                        {\r\n                            \"url\": \"electrum3.cipig.net:10071\"\r\n                        }\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Electrum\"\r\n            }\r\n            // \"tx_history\": false,\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"address_format\": {\r\n            //     \"format\": \"standard\" // Accepted values: \"standard\", \"segwit\"\r\n            // }, // Default: Coin Config\r\n            // \"utxo_merge_params\": null,\r\n            // // \"utxo_merge_params\": {\r\n            // //     \"merge_at\":50\r\n            // //     // \"check_every\":10,\r\n            // //     // \"max_merge_at_once\":100\r\n            // //     },\r\n            // \"check_utxo_maturity\": false,\r\n            // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n            // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n            // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_qtum_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_qtum_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_qtum_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_qtum_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "BCH",
							"item": [
								{
									"name": "enable_bch_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_bch_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\":\"tBCH\",\r\n        // \"allow_slp_unsafe_conf\":false,\r\n        \"bchd_urls\":[\r\n            \"https://bchd-testnet.electroncash.de:18335\" // Required only if: \"allow_slp_unsafe_conf\": false\r\n        ],\r\n        \"mode\": {\r\n            \"rpc\":\"Electrum\", // Accepted values: \"Electrum\", \"Native\"\r\n            \"rpc_data\": {\r\n                \"servers\": [\r\n                    {\r\n                        \"url\": \"electroncash.de:50003\"\r\n                        // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                        // \"disable_cert_verification\": false\r\n                    },\r\n                    {\r\n                        \"url\": \"tbch.loping.net:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"blackie.c3-soft.com:60001\"\r\n                    },\r\n                    {\r\n                        \"url\": \"bch0.kister.net:51001\"\r\n                    }\r\n                ]\r\n            } // Required only if: \"rpc\": \"Electrum\"\r\n        },\r\n        \"slp_tokens_requests\":[\r\n            {\r\n                \"ticker\":\"USDF\"\r\n                // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n            }\r\n        ]\r\n        // \"tx_history\": false,\r\n        // \"required_confirmations\": 1, // Default: Coin Config\r\n        // \"address_format\": {\r\n        //     \"format\": \"standard\" // Accepted values: \"standard\", \"cashaddress\"\r\n        // //    \"network\": \"bchtest\" // Required only if: \"format\": \"cashaddress\"\r\n        // }, // Default: Coin Config\r\n        // \"utxo_merge_params\": null,\r\n        // // \"utxo_merge_params\": {\r\n        // //     \"merge_at\":50\r\n        // //     // \"check_every\":10,\r\n        // //     // \"max_merge_at_once\":100\r\n        // //     },\r\n        // \"check_utxo_maturity\": false,\r\n        // \"priv_key_policy\": \"IguanaPrivKey\", // Accepted values: \"IguanaPrivKey\", \"Trezor\"\r\n        // \"gap_limit\": 20, // used only if: \"priv_key_policy\": \"Trezor\"\r\n        // \"scan_policy\": \"scan_if_new_wallet\" // Accepted values: \"do_not_scan\", \"scan_if_new_wallet\", \"scan\" // used only if: \"priv_key_policy\": \"Trezor\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_slp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_slp\",\r\n    \"params\":{\r\n        \"ticker\":\"sTST\",\r\n        \"activation_params\": {\r\n            // \"required_confirmations\": 1 // Default: Coin Config, Platform Coin Required Confirmation\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "ZCOIN",
							"item": [
								{
									"name": "init_z_coin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_z_coin\",\r\n    \"params\": {\r\n        \"ticker\": \"ZOMBIE\",\r\n        \"activation_params\": {\r\n            \"mode\": {\r\n                \"rpc\": \"Light\", // Accepted values: \"Native\", \"Light\"\r\n                \"rpc_data\": {\r\n                    \"electrum_servers\": [\r\n                        {\r\n                            \"url\": \"zombie.sirseven.me:10033\"\r\n                            // \"protocol\": \"TCP\" // Accepted values: \"TCP\", \"SSL\", \"WS\", \"WSS\"\r\n                            // \"disable_cert_verification\": false\r\n                        }\r\n                    ],\r\n                    \"light_wallet_d_servers\": [\r\n                        \"http://zombie.sirseven.me:443\"\r\n                    ]\r\n                } // Required only if: \"rpc\": \"Light\"\r\n            }\r\n            // \"required_confirmations\": 1, // Default: Coin Config\r\n            // \"requires_notarization\": false, // Default: Coin Config\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_z_coin_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_z_coin_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_z_coin_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_z_coin_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "SOLANA",
							"item": [
								{
									"name": "enable_solana_with_tokens",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_solana_with_tokens\",\r\n    \"params\": {\r\n        \"ticker\": \"SOL-DEVNET\",\r\n        \"confirmation_commitment\": \"finalized\", // Accepted values: \"processed\", \"confirmed\", \"finalized\"\r\n        \"client_url\": \"https://api.devnet.solana.com\",\r\n        \"spl_tokens_requests\": [\r\n            {\r\n                \"ticker\": \"USDC-SOL-DEVNET\",\r\n                \"activation_params\": {}\r\n            }\r\n        ]\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "enable_spl",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_spl\",\r\n    \"params\": {\r\n        \"ticker\": \"ADEX-SOL-DEVNET\",\r\n        \"activation_params\": {}\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Wallet",
					"item": [
						{
							"name": "HD Wallet",
							"item": [
								{
									"name": "account_balance",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"account_balance\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"account_index\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_new_address",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_new_address\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"account_id\": 0,\r\n        \"chain\": \"External\" // Accepted values: \"External\", \"Internal\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "QTUM",
							"item": [
								{
									"name": "add_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\",\r\n        \"staking_details\": {\r\n            \"type\": \"Qtum\",\r\n            \"address\": \"qcyBHeSct7Wr4mAw18iuQ1zW5mMFYmtmBE\"\r\n            // \"fee\": 10\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get_staking_infos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_staking_infos\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove_delegation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_delegation\",\r\n    \"params\": {\r\n        \"coin\": \"tQTUM\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Hardware Wallet",
							"item": [
								{
									"name": "init_create_new_account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_create_new_account\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\"\r\n        // \"scan\": true\r\n        // \"gap_limit\": 20\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_create_new_account_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_create_new_account_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_create_new_account_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_create_new_account_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_scan_for_new_addresses",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_scan_for_new_addresses\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"account_index\": 0\r\n        // \"gap_limit\": 20\r\n\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_scan_for_new_addresses_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_scan_for_new_addresses_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_trezor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_trezor\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_trezor_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_trezor_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_trezor_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_trezor_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Withdraw",
							"item": [
								{
									"name": "withdraw",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "init_withdraw",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"init_withdraw\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"to\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\",\r\n        \"amount\": 1.025 // used only if: \"max\": false\r\n        // \"from\": null,\r\n        // // \"from\": {\r\n        // //     \"account_id\": 0,\r\n        // //     \"chain\": \"External\", // Accepted values: \"External\", \"Internal\"\r\n        // //     \"address_id\": 0\r\n        // // },\r\n        // // \"from\": {\r\n        // //     \"derivation_path\": \"m/44'/501'/0'\"\r\n        // // },\r\n        // \"max\": false,\r\n        // \"fee\": {\r\n        //     \"type\": \"UtxoFixed\", // Accepted values: \"UtxoFixed\", \"UtxoPerKbyte\"\r\n        //     \"amount\": 0.00001 // default amount is 1000 of the smallest unit of the coin (0.00001 for 8 decimal places coins)\r\n        // } // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw_status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw_status\",\r\n    \"params\": {\r\n        \"task_id\": 0\r\n        // \"forget_if_finished\": true\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "withdraw_user_action",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Strip JSON Comments\r",
													"const rawData = pm.request.body.toString();\r",
													"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
													"\r",
													"pm.request.body.update(strippedData);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"withdraw_user_action\",\r\n    \"params\": {\r\n        \"task_id\": 0,\r\n        \"user_action\": {\r\n            \"action_type\": \"TrezorPin\",\r\n            \"pin\": \"123456\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
										},
										"url": {
											"raw": "{{address}}",
											"host": [
												"{{address}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get_raw_transaction",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_raw_transaction\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"tx_hash\": \"8c34946c0894b8520a84d6182f5962a173e0995b4a4fe1b40a867d8a9cd5e0c1\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "my_tx_history",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"my_tx_history\",\r\n    \"params\": {\r\n        \"coin\": \"tBCH\"\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     // \"FromId\": null, // Accepted values: Strings\r\n        //     \"PageNumber\": 1 // used only if: \"from_id\": null\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "sign_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"sign_message\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"message\": \"test\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify_message",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"verify_message\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"message\": \"test\",\r\n        \"signature\": \"IB0DBH6R+P836Y86PVLJPTV5Vp3aEJhW6qwQj8mfExT4dJIyhohcDzZ6GQr7N8pIN05ISQS+D7G/DnLTc7C/oso=\",\r\n        \"address\": \"RNBA756iaFCx2Uhya3pvCufbeyovAaknJL\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "best_orders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"best_orders\",\r\n    \"params\": {\r\n        \"coin\": \"RICK\",\r\n        \"action\": \"buy\", // Accepted values: \"buy\", \"sell\"\r\n        \"request_by\": {\r\n            \"type\": \"volume\", // Accepted values: \"volume\", \"number\"\r\n            \"value\": 1.1 // Accepted values: Decimals if \"type\": \"volume\", Unsigned Integers if \"type\": \"number\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "orderbook",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"orderbook\",\r\n    \"params\": {\r\n        \"base\": \"RICK\",\r\n        \"rel\": \"MORTY\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_simple_market_maker_bot\",\r\n    \"params\": {\r\n        \"cfg\": {\r\n            \"RICK/MORTY\": {\r\n                \"base\": \"RICK\",\r\n                \"rel\": \"MORTY\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            },\r\n            \"KMD-BEP20/BUSD-BEP20\": {\r\n                \"base\": \"KMD-BEP20\",\r\n                \"rel\": \"BUSD-BEP20\",\r\n                \"spread\": \"1.025\",\r\n                \"enable\": true\r\n                // \"min_volume\": null,\r\n                // // \"min_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"min_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max_volume\": null,\r\n                // // \"max_volume\": {\r\n                // //     \"percentage\": \"0.25\"\r\n                // // },\r\n                // // \"max_volume\": {\r\n                // //     \"usd\": \"1\"\r\n                // // },\r\n                // \"max\": false,\r\n                // \"base_confs\": 1, // Default: Coin Config\r\n                // \"base_nota\": false, // Default: Coin Config\r\n                // \"rel_confs\": 1, // Default: Coin Config\r\n                // \"rel_nota\": false, // Default: Coin Config\r\n                // \"price_elapsed_validity\": 300.0,\r\n                // \"check_last_bidirectional_trade_thresh_hold\": false,\r\n                // \"min_base_price\": null, // Accepted values: Decimals\r\n                // \"min_rel_price\": null, // Accepted values: Decimals\r\n                // \"min_pair_price\": null // Accepted values: Decimals\r\n            }\r\n        }\r\n        // \"price_url\": \"https://prices.komodo.live:1313/api/v2/tickers\",\r\n        // \"bot_refresh_rate\": 30.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_simple_market_maker_bot",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_simple_market_maker_bot\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "trade_preimage",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"trade_preimage\",\r\n    \"params\": {\r\n        \"base\": \"RICK\",\r\n        \"rel\": \"MORTY\",\r\n        \"swap_method\": \"setprice\", // Accepted values: \"setprice\", \"buy\", \"sell\"\r\n        \"price\": 1.01,\r\n        \"volume\": 1.05 // used only if: \"max\": false\r\n        // \"max\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Swaps",
					"item": [
						{
							"name": "recreate_swap_data",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"recreate_swap_data\",\r\n    \"params\": {\r\n        \"swap\": {\r\n            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\",\r\n            \"events\": [\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"lock_duration\": 7800,\r\n                            \"maker\": \"631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"maker_amount\": \"3\",\r\n                            \"maker_coin\": \"BEER\",\r\n                            \"maker_coin_start_block\": 156186,\r\n                            \"maker_payment_confirmations\": 0,\r\n                            \"maker_payment_wait\": 1568883784,\r\n                            \"my_persistent_pub\": \"02031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3\",\r\n                            \"started_at\": 1568881184,\r\n                            \"taker_amount\": \"4\",\r\n                            \"taker_coin\": \"ETOMIC\",\r\n                            \"taker_coin_start_block\": 175041,\r\n                            \"taker_payment_confirmations\": 1,\r\n                            \"taker_payment_lock\": 1568888984,\r\n                            \"uuid\": \"07ce08bf-3db9-4dd8-a671-854affc1b7a3\"\r\n                        },\r\n                        \"type\": \"Started\"\r\n                    },\r\n                    \"timestamp\": 1568881185316\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"maker_payment_locktime\": 1568896784,\r\n                            \"maker_pubkey\": \"02631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640\",\r\n                            \"secret_hash\": \"eba736c5cc9bb33dee15b4a9c855a7831a484d84\"\r\n                        },\r\n                        \"type\": \"Negotiated\"\r\n                    },\r\n                    \"timestamp\": 1568881246025\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"0c07be4dda88d8d75374496aa0f27e12f55363ce8d558cb5feecc828545e5f87\",\r\n                            \"tx_hex\": \"0400008085202f890146b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c000000006a473044022077acb70e5940dfe789faa77e72b34f098abbf0974ea94a0380db157e243965230220614ec4966db0a122b0e7c23aa0707459b3b4f8241bb630c635cf6e943e96362e012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff02f0da0700000000001976a914ca1e04745e8ca0c60d8c5881531d51bec470743f88ac68630700000000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac5e3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerFeeSent\"\r\n                    },\r\n                    \"timestamp\": 1568881250689\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"31d97b3359bdbdfbd241e7706c90691e4d7c0b7abd27f2b22121be7f71c5fd06\",\r\n                            \"tx_hex\": \"0400008085202f8901b4679094d4bf74f52c9004107cb9641a658213d5e9950e42a8805824e801ffc7010000006b483045022100b2e49f8bdc5a4b6c404e10150872dbec89a46deb13a837d3251c0299fe1066ca022012cbe6663106f92aefce88238b25b53aadd3522df8290ced869c3cc23559cc23012102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ffffffff0200a3e1110000000017a91476e1998b0cd18da5f128e5bb695c36fbe6d957e98764c987c9bf0000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac753a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"MakerPaymentReceived\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentWaitConfirmStarted\"\r\n                    },\r\n                    \"timestamp\": 1568881291571\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"MakerPaymentValidatedAndConfirmed\"\r\n                    },\r\n                    \"timestamp\": 1568881291985\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"tx_hash\": \"95926ab204049edeadb370c17a1168d9d79ee5747d8d832f73cfddf1c74f3961\",\r\n                            \"tx_hex\": \"0400008085202f8902875f5e5428c8ecfeb58c558dce6353f5127ef2a06a497453d7d888da4dbe070c010000006a4730440220416059356dc6dde0ddbee206e456698d7e54c3afa92132ecbf332e8c937e5383022068a41d9c208e8812204d4b0d21749b2684d0eea513467295e359e03c5132e719012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff46b98696761d5e8667ffd665b73e13a8400baab4b22230a7ede0e4708597ee9c010000006b483045022100a990c798d0f96fd5ff7029fd5318f3c742837400d9f09a002e7f5bb1aeaf4e5a0220517dbc16713411e5c99bb0172f295a54c97aaf4d64de145eb3c5fa0fc38b67ff012102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ffffffff020084d7170000000017a9144d57b4930e6c86493034f17aa05464773625de1c877bd0de03010000001976a91405aab5342166f8594baf17a7d9bef5d56744332788ac8c3a835d000000000000000000000000000000\"\r\n                        },\r\n                        \"type\": \"TakerPaymentSent\"\r\n                    },\r\n                    \"timestamp\": 1568881296904\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"secret\": \"fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96\",\r\n                            \"transaction\": {\r\n                                \"tx_hash\": \"68f5ec617bd9a4a24d7af0ce9762d87f7baadc13a66739fd4a2575630ecc1827\",\r\n                                \"tx_hex\": \"0400008085202f890161394fc7f1ddcf732f838d7d74e59ed7d968117ac170b3adde9e0404b26a929500000000d8483045022100a33d976cf509d6f9e66c297db30c0f44cced2241ee9c01c5ec8d3cbbf3d41172022039a6e02c3a3c85e3861ab1d2f13ba52677a3b1344483b2ae443723ba5bb1353f0120fb968d5460399f20ffd09906dc8f65c21fbb5cb8077a8e6d7126d0526586ca96004c6b63049858835db1752102031d4256c4bc9f99ac88bf3dba21773132281f65f9bf23a59928bce08961e2f3ac6782012088a914eba736c5cc9bb33dee15b4a9c855a7831a484d84882102631dcf1d4b1b693aa8c2751afc68e4794b1e5996566cfc701a663f8b7bbbe640ac68ffffffff011880d717000000001976a91464ae8510aac9546d5e7704e31ce177451386455588ac942c835d000000000000000000000000000000\"\r\n                            }\r\n                        },\r\n                        \"type\": \"TakerPaymentSpent\"\r\n                    },\r\n                    \"timestamp\": 1568881328643\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"data\": {\r\n                            \"error\": \"taker_swap:798] utxo:950] utxo:950] error\"\r\n                        },\r\n                        \"type\": \"MakerPaymentSpendFailed\"\r\n                    },\r\n                    \"timestamp\": 1568881328645\r\n                },\r\n                {\r\n                    \"event\": {\r\n                        \"type\": \"Finished\"\r\n                    },\r\n                    \"timestamp\": 1568881328648\r\n                }\r\n            ],\r\n            \"error_events\": [\r\n                \"StartFailed\",\r\n                \"NegotiateFailed\",\r\n                \"TakerFeeSendFailed\",\r\n                \"MakerPaymentValidateFailed\",\r\n                \"TakerPaymentTransactionFailed\",\r\n                \"TakerPaymentDataSendFailed\",\r\n                \"TakerPaymentWaitForSpendFailed\",\r\n                \"MakerPaymentSpendFailed\",\r\n                \"TakerPaymentRefunded\",\r\n                \"TakerPaymentRefundFailed\"\r\n            ],\r\n            \"success_events\": [\r\n                \"Started\",\r\n                \"Negotiated\",\r\n                \"TakerFeeSent\",\r\n                \"MakerPaymentReceived\",\r\n                \"MakerPaymentWaitConfirmStarted\",\r\n                \"MakerPaymentValidatedAndConfirmed\",\r\n                \"TakerPaymentSent\",\r\n                \"TakerPaymentSpent\",\r\n                \"MakerPaymentSpent\",\r\n                \"Finished\"\r\n            ]\r\n            // \"type\": , // Accepted values: \"Maker\", \"Taker\"\r\n            // \"my_order_uuid\": null, // Accepted values: Strings\r\n            // \"taker_amount\": null, // Accepted values: Decimals\r\n            // \"taker_coin\": null, // Accepted values: Strings\r\n            // \"taker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"maker_amount\": null, // Accepted values: Decimals\r\n            // \"maker_coin\": null, // Accepted values: Strings\r\n            // \"maker_coin_usd_price\": null, // Accepted values: Decimals\r\n            // \"gui\": null, // Accepted values: Strings\r\n            // \"mm_version\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Lightning",
					"item": [
						{
							"name": "close_channel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"close_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"channel_id\": \"e57a53516302c3e35e0964c2b8b1db6e1e4b451fab3259b6fef0d0399a3e1ff2\"\r\n        // \"force_close\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "connect_to_lightning_node",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"connect_to_lightning_node\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "enable_lightning",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"enable_lightning\",\r\n    \"params\": {\r\n        \"ticker\": \"tBTC-TEST-lightning\",\r\n        \"activation_params\": {\r\n            \"name\": \"Mm2TestNode\"\r\n            // \"listening_port\": 9735,\r\n            // \"color\": \"000000\",\r\n            // \"payment_retries\": 5,\r\n            // \"backup_path\": null // Accepted values: Strings\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "generate_invoice",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"generate_invoice\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"description\": \"test invoice\"\r\n        // \"amount_in_msat\": null // Accepted values: Integers\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_channel_details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_channel_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"rpc_channel_id\": 1\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_claimable_balances",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_claimable_balances\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"include_open_channels_balances\": false\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_payment_details",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_payment_details\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment_hash\": \"32f996e6e0aa88e567318beeadb37b6bc0fddfd3660d4a87726f308ed1ec7b33\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list_closed_channels_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"list_closed_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value\": null, // Accepted values: Integers\r\n        // //     // \"closing_tx\": null, // Accepted values: Strings\r\n        // //     // \"closure_reason\": null, // Accepted values: Strings\r\n        // //     // \"claiming_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"to_claimed_balance\": null, // Accepted values: Decimals\r\n        // //     // \"channel_type\": null, // Accepted values: \"Outbound\", \"Inbound\"\r\n        // //     // \"channel_visibility\": null // Accepted values: \"Public\", \"Private\"\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list_open_channels_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"list_open_channels_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"channel_id\": null, // Accepted values: Strings\r\n        // //     // \"counterparty_node_id\": null, // Accepted values: Strings\r\n        // //     // \"funding_tx\": null, // Accepted values: Strings\r\n        // //     // \"from_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"to_funding_value_sats\": null, // Accepted values: Integers\r\n        // //     // \"is_outbound\": null, // Accepted values: Booleans\r\n        // //     // \"from_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_balance_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_outbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_inbound_capacity_msat\": null, // Accepted values: Integers\r\n        // //     // \"confirmed\": null, // Accepted values: Booleans\r\n        // //     // \"is_usable\": null, // Accepted values: Booleans\r\n        // //     // \"is_public\": null // Accepted values: Booleans\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": 4 // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list_payments_by_filter",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"list_payments_by_filter\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\"\r\n        // \"filter\": null,\r\n        // // \"filter\": {\r\n        // //     // \"payment_type\": null,\r\n        // //     // // \"payment_type\": {\r\n        // //     // //     \"type\": \"Outbound Payment\", // Accepted values: \"Outbound Payment\", \"Inbound Payment\"\r\n        // //     // //     \"destination\": \"03933884aaf1d6b108397e5efe5c86bcf2d8ca8d2f700eda99db9214fc2712b134\" // Required only if: \"type\": \"Putbound Payment\"\r\n        // //     // // },\r\n        // //     // \"description\": null, // Accepted values: Strings\r\n        // //     // \"status\": null, // Accepted values: \"pending\", \"succeeded\", \"failed\"\r\n        // //     // \"from_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_amount_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"to_fee_paid_msat\": null, // Accepted values: Integers\r\n        // //     // \"from_timestamp\": null, // Accepted values: Integers\r\n        // //     // \"to_timestamp\": null // Accepted values: Integers\r\n        // // },\r\n        // \"limit\": 10,\r\n        // \"paging_options\": {\r\n        //     \"PageNumber\": 1\r\n        //     // \"FromId\": \"d6d3cf3fd5237ed15295847befe00da67c043da1c39a373bff30bd22442eea43\" // used instead of: \"PageNumber\"\r\n        // }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "open_channel",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"open_channel\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"node_address\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9@203.132.94.196:9735\",\r\n        \"amount\": {\r\n            \"type\": \"Exact\", // Accepted values: \"Exact\", \"Max\"\r\n            \"value\": 0.0002 // Required only if: \"type\": \"Exact\"\r\n        }\r\n        // \"push_msat\": 0,\r\n        // \"channel_options\": {\r\n        //     \"proportional_fee_in_millionths_sats\": 0, // Default: Coin Config\r\n        //     \"base_fee_msat\": 1000, // Default: Coin Config\r\n        //     \"cltv_expiry_delta\": 72, // Default: Coin Config\r\n        //     \"announced_channel\": false, // Default: Coin Config\r\n        //     \"commit_upfront_shutdown_pubkey\": true, // Default: Coin Config\r\n        //     \"max_dust_htlc_exposure_msat\": 5000000, // Default: Coin Config\r\n        //     \"force_close_avoidance_max_fee_satoshis\": 1000 // Default: Coin Config\r\n        // },\r\n        // \"counterparty_locktime\": 144, // Default: Coin Config\r\n        // \"our_htlc_minimum_msat\": 1 // Default: Coin Config\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "send_payment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"send_payment\",\r\n    \"params\": {\r\n        \"coin\": \"tBTC-TEST-lightning\",\r\n        \"payment\": {\r\n            \"type\": \"invoice\", // Accepted values: \"invoice\", \"keysend\"\r\n            \"invoice\": \"lntb20u1p32wwxapp5p8gjy2e79jku5tshhq2nkdauv0malqqhzefnqmx9pjwa8h83cmwqdp8xys9xcmpd3sjqsmgd9czq3njv9c8qatrvd5kumcxqrrsscqp79qy9qsqsp5m473qknpecv6ajmwwtjw7keggrwxerymehx6723avhdrlnxmuvhs54zmyrumkasvjp0fvvk2np30cx5xpjs329alvm60rwy3payrnkmsd3n8ahnky3kuxaraa3u4k453yf3age7cszdxhjxjkennpt75erqpsfmy4y\" // Required only if: \"type\": \"invoice\"\r\n            // \"destination\": \"038863cf8ab91046230f561cd5b386cbff8309fa02e3f0c3ed161a3aeb64a643b9\", // Required only if: \"type\": \"keysend\"\r\n            // \"amount_in_msat\": 1000, // Required only if: \"type\": \"keysend\"\r\n            // \"expiry\": 24 // Required only if: \"type\": \"keysend\"\r\n        }\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Stats",
					"item": [
						{
							"name": "add_node_to_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"add_node_to_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\",\r\n        \"address\": \"127.0.0.1:7783\",\r\n        \"peer_id\": \"12D3KooWHcPAnsq22MNoWkHEB1drFY1YrnRm6rzURvJupPyL1swZ\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "remove_node_from_version_stat",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"remove_node_from_version_stat\",\r\n    \"params\": {\r\n        \"name\": \"TestVersionStat\"\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "start_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"start_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "stop_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"stop_version_stat_collection\"\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update_version_stat_collection",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Strip JSON Comments\r",
											"const rawData = pm.request.body.toString();\r",
											"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
											"\r",
											"pm.request.body.update(strippedData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"update_version_stat_collection\",\r\n    \"params\": {\r\n        \"interval\": 60.0\r\n    }\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
								},
								"url": {
									"raw": "{{address}}",
									"host": [
										"{{address}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_current_mtp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userpass\": \"{{userpass}}\",\n    \"mmrpc\": \"2.0\",\n    \"method\": \"get_current_mtp\",\n    \"params\": {\n        \"coin\": \"RICK\"\n    }\n    // \"id\": null // Accepted values: Integers\n}\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_public_key",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_public_key_hash",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Strip JSON Comments\r",
									"const rawData = pm.request.body.toString();\r",
									"const strippedData = rawData.replace(/\\\\\"|\"(?:\\\\\"|[^\"])*\"|(\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\/)/g, (m, g) => g ? \"\" : m)\r",
									"\r",
									"pm.request.body.update(strippedData);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userpass\": \"{{userpass}}\",\r\n    \"mmrpc\": \"2.0\",\r\n    \"method\": \"get_public_key_hash\"\r\n    // \"params\": {},\r\n    // \"id\": null // Accepted values: Integers\r\n}\r\n"
						},
						"url": {
							"raw": "{{address}}",
							"host": [
								"{{address}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
